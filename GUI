#lang racket
(require racket/gui)
(require "WaziticoLogica")

(define width 1062)
(define height 764)
(define poke-bg-width 1000)
(define poke-bg-height 715)
(define big-rect-side 66)
(define small-rect-side 42)

;Creates the menu window for the application
(define main-frame (new frame%
                       [label "Wazitico"]
                       [width width]
                       [height height]
                       [style '(no-resize-border)]))

;Shows the menu window
(send main-frame show #t)

(define (paint-top frame dc)
  (send dc set-background "orange")
  (send dc clear))
(define menu-canvas (new canvas%
                   [parent main-frame]
                   [paint-callback paint-top]))

;Loads images
(define menu-background (make-object bitmap% "images/menu-background.png"))
(define orange-bg (make-object bitmap% "images/orange.jpg"))
(define map1-kanto (make-object bitmap% "images/kanto-map.png"))
(define map2-johto (make-object bitmap% "images/kanto-map.png"))
(define kanto-image (make-object bitmap% "images/kanto-image.png"))
(define johto-image (make-object bitmap% "images/johto-image.png"))

;Creates a containers for the menu
(define first-v-panel (new vertical-pane% [parent main-frame]
                                           [border 25]
                                           [spacing 25]))


(define first-h-panel (new horizontal-pane% [parent first-v-panel]
                                           [border 25]
                                           [spacing 25]))
    
(new message% [parent first-v-panel]
    [label "Choose!"]
    [font (make-object font% 50 'default 'normal 'bold)])

(define (paint-bottom frame dc)
  (send dc set-background "orange")
  (send dc clear))

(define menu-canvas2 (new canvas%
                   [parent main-frame]
                   [paint-callback paint-bottom]))


;------------------------------------ Hash for graphic-logic node connection ------------------------------------

(define rect-list '( ((81 333) a 42)
                     ((197 254) b 42)
                     ((197 333) c 42)
                     ((197 480) d 42)
                     ((200 596) j 42)
                     ((345 451) h 42)
                     ((345 596) i 42)
                     ((549 596) t 42)
                     ((549 300) l 42)
                     ((650 300) n 42)
                     ((791 300) q 42)
                     ((791 156) p 42)
                     ((791 372) r 42)
                     ((791 520) s 42)
                     ((33 482) e 42)
                     ((331 134) f 66)
                     ((331 319) g 66)
                     ((639 134) k 66)
                     ((639 358) o 66)
                     ((538 508) m 66)))

(define coords-list '( (a ((102 354)))
                     (b ((218 275)))
                     (c ((218 354)))
                     (d ((218 501)))
                     (j ((221 617)))
                     (h ((366 472)))
                     (i ((366 617)))
                     (t ((570 617)))
                     (l ((570 321)))
                     (n ((671 321)))
                     (q ((812 321)))
                     (p ((812 177)))
                     (r ((812 391)))
                     (s ((812 541)))
                     (e ((54 503)))
                     (f ((366 167)))
                     (g ((366 354)))
                     (k ((672 171)))
                     (o ((672 391)))
                     (m ((570 541)))))



;----------------------------- Funtion for collision between rects and mouse ------------------------------

(define (get-char list)
  (second (first list)))

(define (get-coords list)
  (caar list))

; Function for mouse click vs rectangles collision
(define (collision-rect? mouse-x mouse-y rect-x rect-y side)
  (cond ((and (<= mouse-x (+ rect-x side)) (>= mouse-x rect-x)
             (<= mouse-y (+ rect-y side)) (>= mouse-y rect-y)) #t)
       (else #f)))

; Detects which rectangle has been clicked
(define (collision-aux mouse-x mouse-y coords side list)
  (cond ((< (length list) 1) #f)
       ((collision-rect? mouse-x mouse-y (first coords) (second coords) side) (get-char list))
       (else
        (collision-aux mouse-x mouse-y (caadr list) (last (cadr list)) (cdr list)))))


(define (collision? mouse-x mouse-y list)
  (collision-aux mouse-x mouse-y (caar list) (last (cadr list)) list))


;---------------------------------- Transform char list to coords list ---------------------------------

(define click 0)

;list1 is rect-list, list2 is coords list
(define (from-char-to-coords char)
  (from-char-to-coords-aux char rect-list '()))

(define (from-char-to-coords-aux char list list2)
  (cond ((equal? char (get-char list)) (cons (get-coords list) list2))
       (else
        (from-char-to-coords-aux char (cdr list) '())))) 

(define (add-last list value)
  (append list value))

  
;Translates the char path to coords for drawing on canvas

(define (charList-to-coordsList char-list coords)
  (charList-to-coordsList-aux char-list coords))


(define (charList-to-coordsList-aux char-list coords)
  (cond ((empty? char-list) coords)
       (else (add-last (second (assoc (first char-list) coords-list)) (charList-to-coordsList-aux (cdr char-list) coords)))))


;------------------------------------------------------------ Drawing paths -----------------------------------------------------------


(define (draw-path-aux pair-A pair-B coords-list dc)
  (sleep/yield 0.01)
  (set! click 0)
  (cond ((< (length coords-list) 2)
         (send dc draw-line
              (car pair-A) (cadr pair-A)
              (car pair-B) (cadr pair-B)))
       (else
        (send dc draw-line
             (car pair-A) (cadr pair-A)
             (car pair-B) (cadr pair-B))
        (draw-path-aux (car coords-list) (cadr coords-list) (cdr coords-list) dc))))

(define (draw-path coords-list dc)
  (draw-path-aux (car coords-list) (cadr coords-list) coords-list dc))


;-------------------------------------- Draw routes of all paths --------------------------------------


(define (shortest-path nodeA nodeB)
  (cdr (ruta-optima (rutasPesos (generador-rutas nodeA nodeB kanto)))))

(define (draw-others nodeA nodeB list dc)
  (cond ((empty? list) #f)
       ((draw-path (charList-to-coordsList (first list) '()) dc) (draw-others nodeA nodeB (cdr list) dc))))

(define (draw-all nodeA nodeB dc)
  (send dc set-pen "blue" 15 'solid)
  (draw-path (charList-to-coordsList (shortest-path nodeA nodeB) '()) dc)
  (send dc set-pen "orange" 6 'solid)
  (draw-others nodeA nodeB (generador-rutas nodeA nodeB kanto) dc))



(define nodeA 'a)
(define nodeB 'b)

(define (detect-mouse-pos x y dc)
  (sleep/yield 0.01)
  (cond ((and (= click 1) (set! nodeB (collision? x y rect-list))) (draw-all nodeA nodeB dc))
       ((set! nodeA (collision? x y rect-list)) (set! click 1))
       (else
        (set! click 0))))


(define my-canvas%
  (class canvas%
    (super-new)
    (define/override (on-event event)
      (when (send event button-down? 'any)
        (detect-mouse-pos (send event get-x) (send event get-y) (send this get-dc))))))

;-------------------------------------------------- Kanto (first map) --------------------------------------------------

;Creates the frames in which the map will be displayed
(define map1-frame (new frame%
                       [label "Wazitico"]
                       [width width]
                       [height height]
                       [style '(no-resize-border)]))

;Shows the window for the first map, Kanto
(define (show-map1 button event)
  (send main-frame show #f)
  (send map1-frame show #t))

;Creates map1 (Kanto) button
(define button1 (new button%	 
   	 	[label kanto-image]	 
   	 	[parent first-h-panel]
                [min-width (/ width 2)]
                [min-height 100]
                [font (make-object font% 50 'default 'normal 'bold)]
                [callback show-map1]))

  

;Draws map1 (Kanto) on screen and aligns it to the center
(define (draw-map1 frame dc)
  (send dc set-background (make-color 12 91 108))
  (send dc clear)
  (send dc set-pen "black" 2 'solid)
  (send dc draw-rectangle x-offset y-offset (+ 1 poke-bg-width) (+ 1 poke-bg-height))
  
  (send dc draw-bitmap map1-kanto x-offset y-offset))

(define map1-canvas (new my-canvas%
                   [parent map1-frame]
                   [paint-callback draw-map1]))

(define map1-dc (send map1-canvas get-dc))


(define (clear-canvas1 button event)
  (send map1-dc clear)
  (draw-map1 map1-frame map1-dc))

;Clears canvas
(define clear-button (new button%	 
   	 	[label "Choose again!"]	 
   	 	[parent map1-frame]
                [min-width 30]
                [min-height 20]
                [callback clear-canvas1]))

(define (return button event)
  (send map1-frame show #f)
  (send main-frame show #t))


;Returns to menu
(define return-button (new button%	 
   	 	[label "Return to menu"]	 
   	 	[parent map1-frame]
                [min-width 30]
                [min-height 20]
                [callback return]))

;-------------------------------------------------- Johto (second map) --------------------------------------------------

;Creates the frame in which the map will be displayed
(define map2-frame (new frame%
                       [label "Wazitico"]
                       [width width]
                       [height height]
                       [style '(no-resize-border)]))

;Shows the window for the second map, Johto
(define (show-map2 button event)
  (send main-frame show #f)
  (send map2-frame show #t))

;Creates map2 (Johto) button
(define button2 (new button%	 
   	 	[label johto-image]	 
   	 	[parent first-h-panel]
                [min-width (/ width 2)]
                [min-height 100]
                [font (make-object font% 50 'default 'normal 'bold)]
                [callback show-map2]))



(define x-offset (- (/ width 2) (/ poke-bg-width 2)))
(define y-offset (- (/ height 2) (/ poke-bg-height 2)))

;Draws map2 (Johto) on screen and aligns it to the center
(define (draw-map2 frame dc)
  (send dc set-background (make-color 12 91 108))
  (send dc clear)
  (send dc set-pen "black" 2 'solid)

  (send dc draw-rectangle x-offset y-offset (+ 1 poke-bg-width) (+ 1 poke-bg-height))
  
  (send dc draw-bitmap map2-johto x-offset y-offset)
  (send dc set-pen (make-color 158 57 115) 15 'solid))

(define map2-canvas (new canvas%
                   [parent map2-frame]
                   [paint-callback draw-map2]))

(define map2-dc (send map2-canvas get-dc))

