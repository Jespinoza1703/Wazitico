#lang racket
(require racket/gui)

(define width 1062)
(define height 764)
(define poke-bg-width 1000)
(define poke-bg-height 715)

;Creates the menu window for the application
(define main-frame (new frame%
                       [label "Wazitico"]
                       [width width]
                       [height height]
                       [style '(no-resize-border)]))

;Shows the menu window
(send main-frame show #t)

(define (paint-top frame dc)
  (send dc set-background "orange")
  (send dc clear))
(define menu-canvas (new canvas%
                   [parent main-frame]
                   [paint-callback paint-top]))

;Loads images
(define menu-background (make-object bitmap% "images/menu-background.png"))
(define orange-bg (make-object bitmap% "images/orange.jpg"))
(define map1-kanto (make-object bitmap% "images/kanto-map.png"))
(define map2-johto (make-object bitmap% "images/kanto-map.png"))
(define kanto-image (make-object bitmap% "images/kanto-image.png"))
(define johto-image (make-object bitmap% "images/johto-image.png"))

;Creates a containers for the menu
(define first-v-panel (new vertical-pane% [parent main-frame]
                                           [border 25]
                                           [spacing 25]))


(define first-h-panel (new horizontal-pane% [parent first-v-panel]
                                           [border 25]
                                           [spacing 25]))
    
(new message% [parent first-v-panel]
    [label "Choose!"]
    [font (make-object font% 50 'default 'normal 'bold)])

(define (paint-bottom frame dc)
  (send dc set-background "orange")
  (send dc clear))

(define menu-canvas2 (new canvas%
                   [parent main-frame]
                   [paint-callback paint-bottom]))

;-------------------------------------- Canvas wrapper, override events --------------------------------------

(define my-canvas%
  (class canvas%
    (super-new)
    (define/override (on-event event)
      (when (send event button-down? 'any)
        (detect-mouse-pos (send event get-x) (send event get-y))))))


;-------------------------------------------------- Kanto (first map) --------------------------------------------------

;Creates the frames in which the map will be displayed
(define map1-frame (new frame%
                       [label "Wazitico"]
                       [width width]
                       [height height]
                       [style '(no-resize-border)]))

;Shows the window for the first map, Kanto
(define (show-map1 button event)
  (send main-frame show #f)
  (send map1-frame show #t))

;Creates map1 (Kanto) button
(define button1 (new button%	 
   	 	[label kanto-image]	 
   	 	[parent first-h-panel]
                [min-width (/ width 2)]
                [min-height 100]
                [font (make-object font% 50 'default 'normal 'bold)]
                [callback show-map1]))



;Draws map1 (Kanto) on screen and aligns it to the center
(define (draw-map1 frame dc)
  (send dc set-background (make-color 12 91 108))
  (send dc clear)
  (send dc set-pen "black" 2 'solid)
  (send dc draw-rectangle x-offset y-offset (+ 1 poke-bg-width) (+ 1 poke-bg-height))
  
  (send dc draw-bitmap map1-kanto x-offset y-offset)
  (send dc set-pen (make-color 158 57 115) 8 'solid)
  (send dc draw-line 402 170 633 170))

(define map1-canvas (new my-canvas%
                   [parent map1-frame]
                   [paint-callback draw-map1]))

(define map1-dc (send map1-canvas get-dc))


;-------------------------------------------------- Johto (second map) --------------------------------------------------

;Creates the frame in which the map will be displayed
(define map2-frame (new frame%
                       [label "Wazitico"]
                       [width width]
                       [height height]
                       [style '(no-resize-border)]))

;Shows the window for the second map, Johto
(define (show-map2 button event)
  (send main-frame show #f)
  (send map2-frame show #t))

;Creates map2 (Johto) button
(define button2 (new button%	 
   	 	[label johto-image]	 
   	 	[parent first-h-panel]
                [min-width (/ width 2)]
                [min-height 100]
                [font (make-object font% 50 'default 'normal 'bold)]
                [callback show-map2]))



(define x-offset (- (/ width 2) (/ poke-bg-width 2)))
(define y-offset (- (/ height 2) (/ poke-bg-height 2)))

;Draws map2 (Johto) on screen and aligns it to the center
(define (draw-map2 frame dc)
  (send dc set-background (make-color 12 91 108))
  (send dc clear)
  (send dc set-pen "black" 2 'solid)

  (send dc draw-rectangle x-offset y-offset (+ 1 poke-bg-width) (+ 1 poke-bg-height))
  
  (send dc draw-bitmap map2-johto x-offset y-offset)
  (send dc set-pen (make-color 158 57 115) 15 'solid))

(define map2-canvas (new my-canvas%
                   [parent map2-frame]
                   [paint-callback draw-map2]))

(define map2-dc (send map2-canvas get-dc))


;------------------------------------------------------------ Drawing paths -----------------------------------------------------------

(define (draw-path-aux pair-A pair-B coords-list dc)
  (cond ((< (length coords-list) 2)
         (send dc draw-line
              (car pair-A) (cadr pair-A)
              (car pair-B) (cadr pair-B)))
       (else
        (send dc draw-line
             (car pair-A) (cadr pair-A)
             (car pair-B) (cadr pair-B))
        (draw-path-aux (car coords-list) (cadr coords-list) (cdr coords-list) dc))))

(define (draw-path coords-list dc)
  (draw-path-aux (car coords-list) (cadr coords-list) coords-list dc))



; ------------------------------- Test -------------------------------

(define coords-list '((216 500) (216 352) (365 352) (365 168) (672 168)))
(define (show-path button event)
  (sleep/yield 0.1)
  (draw-path coords-list map2-dc))


;Creates map2 (Johto) button
(define button3 (new button%
                    [label "Press"]
                    [parent map2-frame]
                    [callback show-path]))



;-------------------------------Test--------------------------------


; ------------------------------- Define recatngles on each graphic node -------------------------------

;Function for personalized brush
(define no-brush (new brush% [style 'transparent]))


(sleep/yield 2)
(send map2-dc set-brush no-brush)
(send map2-dc set-pen "black" 1 'solid)

(define a (send map2-dc draw-rectangle 78 333 42 41))
(define b (send map2-dc draw-rectangle 197 333 42 41))
(define c (send map2-dc draw-rectangle 197 254 42 41))
(define d (send map2-dc draw-rectangle 197 480 42 41))
(define e (send map2-dc draw-rectangle 33 480 42 41))
(define j (send map2-dc draw-rectangle 200 596 42 41))
(define h (send map2-dc draw-rectangle 345 451 42 41))
(define i (send map2-dc draw-rectangle 345 596 42 41))
(define t (send map2-dc draw-rectangle 549 596 42 41))
(define l (send map2-dc draw-rectangle 549 300 42 41))
(define n (send map2-dc draw-rectangle 650 300 42 41))
(define q (send map2-dc draw-rectangle 791 300 42 41))
(define p (send map2-dc draw-rectangle 791 156 42 41))
(define r (send map2-dc draw-rectangle 791 372 42 41))
(define s (send map2-dc draw-rectangle 791 520 42 41))


(define f (send map2-dc draw-rectangle 331 134 66 66))
(define g (send map2-dc draw-rectangle 331 319 66 66))
(define k (send map2-dc draw-rectangle 639 134 66 66))
(define o (send map2-dc draw-rectangle 639 358 66 66))
(define m (send map2-dc draw-rectangle 538 508 66 66))






























(define (detect-mouse-pos x y)
  (print x)
  (print " ")
  (print y))